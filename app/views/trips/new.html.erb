<div class="container my-4">
  <div class="row justify-content-center">
    <div class="col-md-8 col-lg-6">
      <div class="card shadow-sm">
        <div class="card-header">
          <h2 class="card-title text-center">Create a New Trip</h2>
        </div>
        <div class="card-body">
          <%= form_with model: @trip, local: true do |f| %>
            <%# Trip Details %>
            <div class="mb-3">
              <%= f.label :name, class: "form-label" %>
              <%= f.text_field :name, class: "form-control", required: true %>
            </div>

            <div class="row mb-3">
              <div class="col-md-6">
                <%= f.label :start_date, class: "form-label" %>
                <%= f.date_field :start_date, class: "form-control", required: true %>
              </div>
              <div class="col-md-6">
                <%= f.label :end_date, class: "form-label" %>
                <%= f.date_field :end_date, class: "form-control", required: true %>
              </div>
            </div>

            <hr class="my-4">

            <%# Participants Section %>
            <h4 class="mb-3">Participants</h4>
            <div id="participants-fields" class="mb-3">
              <%# Render existing participant fields using the partial %>
              <%= f.fields_for :participants do |p| %>
                <%= render 'participant_fields', f: p %>
              <% end %>
            </div>
            <button type="button" id="add-participant" class="btn btn-outline-secondary btn-sm mb-4">+ Add Participant</button>

            <%# Form Actions %>
            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
              <%= link_to 'Back to Trips', trips_path, class: 'btn btn-secondary me-md-2' %>
              <%= f.submit "Create Trip", class: "btn btn-primary" %>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>

<%# Template for new participant fields (uses the same partial structure) %>
<template id="participant-template">
  <%# The partial now handles the f=nil case internally using the index %>
  <%= render 'participant_fields', index: 'INDEX' %>
</template>

<%# JavaScript for adding/removing participants %>
<script>
  document.addEventListener('turbo:load', () => {
    let nextIndex = document.querySelectorAll('.participant-fields').length;
    const participantsContainer = document.getElementById("participants-fields");
    const addButton = document.getElementById("add-participant");
    const templateElement = document.getElementById("participant-template");

    if (!participantsContainer || !addButton || !templateElement) {
      console.error("Required elements for participant fields not found.");
      return;
    }

    const addParticipantField = () => {
      // Get the raw HTML from the template
      const templateHTML = templateElement.innerHTML;
      // Replace the placeholder index
      const newFieldsHTML = templateHTML.replace(/INDEX/g, nextIndex);
      participantsContainer.insertAdjacentHTML("beforeend", newFieldsHTML);
      nextIndex++;
    };

    addButton.addEventListener("click", (event) => {
      event.preventDefault();
      addParticipantField();
    });

    participantsContainer.addEventListener("click", (e) => {
      if (e.target && e.target.classList.contains("remove-participant")) {
        let fieldWrapper = e.target.closest(".participant-fields");
        // Check for hidden destroy flag for persisted records
        let destroyFlag = fieldWrapper.querySelector('.participant-destroy-flag');
        if (destroyFlag) {
          destroyFlag.value = '1'; // Mark for destruction
          fieldWrapper.style.display = 'none'; // Hide the fields
        } else {
          fieldWrapper.remove(); // Remove newly added fields completely
        }
      }
    });

    // Add initial fields if needed (e.g., first load)
    // Check if the container is truly empty (ignoring whitespace nodes)
    if (!participantsContainer.querySelector('.participant-fields')) {
       // Add 1-3 initial fields based on how many were built in controller
       const initialCount = <%= @trip.participants.reject(&:persisted?).size %>; // Get count built in controller
       for (let i = 0; i < Math.max(1, initialCount); i++) { // Ensure at least 1
            addParticipantField();
       }
    }

  });
</script>
